{{- if .Values.tests.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-post-install-check
  labels:
    {{- include "kornerstone.labels" . | nindent 4 }}
    app.kubernetes.io/component: post-install-check
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "15"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: post-install-check
        image: curlimages/curl:7.88.1
        command: 
        - "sh"
        - "-c"
        - |
          echo "üöÄ Kornerstone ML Platform - Post-Install Verification"
          echo "======================================================="
          
          # Function to check service health
          check_service() {
            local service_name=$1
            local port=$2
            local path=$3
            local max_retries=20
            local retry_count=0
            
            echo "Checking ${service_name}..."
            
            while [ $retry_count -lt $max_retries ]; do
              if curl -f "http://${service_name}:${port}${path}" >/dev/null 2>&1; then
                echo "‚úÖ ${service_name} is healthy!"
                return 0
              fi
              
              retry_count=$((retry_count + 1))
              echo "‚è≥ ${service_name} not ready yet (attempt ${retry_count}/${max_retries})"
              sleep 15
            done
            
            echo "‚ùå ${service_name} failed health check after ${max_retries} attempts"
            echo "   This is not necessarily an error - the service might still be starting up"
            return 1
          }
          
          # Check core services
          echo "\nüîç Checking Core Services..."
          
          # Track results but don't fail on individual services
          service_results=""
          
          {{- if .Values.minio.enabled }}
          if check_service "{{ .Release.Name }}-minio" "{{ .Values.minio.service.ports.api }}" "/minio/health/live"; then
            service_results="${service_results}‚úÖ MinIO: Running\n"
          else
            service_results="${service_results}‚è≥ MinIO: Starting (check manually later)\n"
          fi
          {{- end }}
          
          {{- if .Values.mlflow.enabled }}
          if check_service "{{ .Release.Name }}-mlflow" "{{ .Values.mlflow.service.port }}" "/"; then
            service_results="${service_results}‚úÖ MLflow: Running\n"
          else
            service_results="${service_results}‚è≥ MLflow: Starting (check manually later)\n"
          fi
          {{- end }}
          
          {{- if .Values.argo.enabled }}
          if check_service "{{ .Release.Name }}-argo-workflows-server" "{{ .Values.argo.server.service.port }}" "/"; then
            service_results="${service_results}‚úÖ Argo Workflows: Running\n"
          else
            service_results="${service_results}‚è≥ Argo Workflows: Starting (check manually later)\n"
          fi
          {{- end }}
          
          # Note: Feast can take longer to start, so we'll just show it in the results
          service_results="${service_results}üìã Feast: Check manually - can take 5-10 minutes to fully start\n"
          
          echo "\nüìä Service Status Summary:"
          echo "=========================="
          printf "$service_results"
          
          echo "\nüìù Access Information:"
          echo "======================"
          
          {{- if .Values.mlflow.enabled }}
          echo "üß™ MLflow UI:"
          echo "   kubectl port-forward svc/{{ .Release.Name }}-mlflow {{ .Values.mlflow.service.port }}:{{ .Values.mlflow.service.port }} -n {{ .Release.Namespace }}"
          echo "   Then visit: http://localhost:{{ .Values.mlflow.service.port }}"
          {{- end }}
          
          {{- if .Values.minio.enabled }}
          echo "üóÑÔ∏è  MinIO Console:"
          echo "   kubectl port-forward svc/{{ .Release.Name }}-minio {{ .Values.minio.service.ports.console }}:{{ .Values.minio.service.ports.console }} -n {{ .Release.Namespace }}"
          echo "   Then visit: http://localhost:{{ .Values.minio.service.ports.console }}"
          echo "   Credentials: {{ .Values.minio.auth.rootUser }} / {{ .Values.minio.auth.rootPassword }}"
          {{- end }}
          
          {{- if .Values.feast.enabled }}
          echo "üçΩÔ∏è  Feast Feature Server:"
          echo "   kubectl port-forward svc/{{ .Release.Name }}-feast {{ .Values.feast.service.port }}:{{ .Values.feast.service.port }} -n {{ .Release.Namespace }}"
          echo "   Then visit: http://localhost:{{ .Values.feast.service.port }}"
          {{- end }}
          
          {{- if .Values.argo.enabled }}
          echo "üîÑ Argo Workflows UI:"
          echo "   kubectl port-forward svc/{{ .Release.Name }}-argo-workflows-server {{ .Values.argo.server.service.port }}:{{ .Values.argo.server.service.port }} -n {{ .Release.Namespace }}"
          echo "   Then visit: http://localhost:{{ .Values.argo.server.service.port }}"
          {{- end }}
          
          echo "\nüîç Troubleshooting Commands:"
          echo "============================"
          echo "Check all pods:     kubectl get pods -n {{ .Release.Namespace }}"
          echo "Check all services: kubectl get svc -n {{ .Release.Namespace }}"
          echo "View pod logs:      kubectl logs -f deployment/{{ .Release.Name }}-<service> -n {{ .Release.Namespace }}"
          
          echo "\n‚úÖ Kornerstone ML Platform deployment completed!"
          echo "   Some services may still be starting up. Check the status with the commands above."
          exit 0
  backoffLimit: 2
---
{{- if .Values.minio.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-minio-setup
  labels:
    {{- include "kornerstone.labels" . | nindent 4 }}
    app.kubernetes.io/component: minio-setup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: minio-setup
        image: minio/mc:latest
        command: 
        - "sh"
        - "-c"
        - |
          echo "üóÑÔ∏è  Setting up MinIO buckets..."
          
          # Wait for MinIO to be ready
          until mc alias set kornerstone "http://{{ .Release.Name }}-minio:{{ .Values.minio.service.ports.api }}" "${MINIO_ROOT_USER}" "${MINIO_ROOT_PASSWORD}"; do
            echo "‚è≥ Waiting for MinIO to be ready..."
            sleep 5
          done
          
          # Create buckets
          mc mb kornerstone/mlflow --ignore-existing
          mc mb kornerstone/feast --ignore-existing
          
          echo "‚úÖ MinIO buckets created successfully!"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-minio
              key: root-user
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-minio
              key: root-password
  backoffLimit: 3
{{- end }}
{{- end }} 