{{- if .Values.tests.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-connectivity-test-script
  labels:
    {{- include "kornerstone.labels" . | nindent 4 }}
data:
  test_connectivity.py: |
    import os
    import sys
    import time
    import socket
    import requests
    import psycopg2
    import boto3
    from botocore.client import Config

    def test_postgres():
        print("\nTesting PostgreSQL connection...")
        try:
            conn = psycopg2.connect(
                dbname="mlflow",
                user=os.environ["POSTGRES_USER"],
                password=os.environ["POSTGRES_PASSWORD"],
                host="{{ .Release.Name }}-postgresql",
                port="5432"
            )
            print("✅ Successfully connected to PostgreSQL")
            conn.close()
        except Exception as e:
            print(f"❌ Failed to connect to PostgreSQL: {e}")
            return False
        return True

    def test_mlflow():
        print("\nTesting MLflow connection...")
        try:
            response = requests.get("http://{{ .Release.Name }}-mlflow:5000")
            if response.status_code == 200:
                print("✅ Successfully connected to MLflow")
                return True
            else:
                print(f"❌ MLflow returned status code: {response.status_code}")
                return False
        except Exception as e:
            print(f"❌ Failed to connect to MLflow: {e}")
            return False

    def test_minio():
        print("\nTesting MinIO connection...")
        try:
            s3_client = boto3.client(
                's3',
                endpoint_url='http://{{ .Release.Name }}-minio:{{ .Values.minio.service.ports.api }}',
                aws_access_key_id=os.environ["AWS_ACCESS_KEY_ID"],
                aws_secret_access_key=os.environ["AWS_SECRET_ACCESS_KEY"],
                config=Config(signature_version='s3v4'),
                region_name='us-east-1'
            )
            
            # Try to list buckets
            s3_client.list_buckets()
            print("✅ Successfully connected to MinIO")
            return True
        except Exception as e:
            print(f"❌ Failed to connect to MinIO: {e}")
            return False

    def main():
        print("Starting connectivity tests...")
        time.sleep(5)  # Give services time to be ready
        
        success = True
        if not test_postgres():
            success = False
        if not test_mlflow():
            success = False
        if not test_minio():
            success = False
            
        if success:
            print("\n✅ All connectivity tests passed!")
            sys.exit(0)
        else:
            print("\n❌ Some connectivity tests failed!")
            sys.exit(1)

    if __name__ == "__main__":
        main()
{{- end }} 